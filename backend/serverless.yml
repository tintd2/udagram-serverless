# export NODE_OPTIONS=--max_old_space_size=4096
# sls dynamodb install
# sls dynamodb start
# dynamodb-admin
# sls offline
# us-west-2
# npm remove serverless -g
# npm install serverless@1.74.1 -g
# org: udagram
app: todo-app
service: todo-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-canary-deployments
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  # lambdaHashingVersion: '20201221'

  stage: ${opt:stage, 'dev2'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resouorces section below. For example, 
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET} - DONE
  environment:
    TODOS_TABLE: Todos3-${self:provider.stage}
    # TODOS_CREATED_AT_INDEX: CreatedAtIndex
    USER_ID_INDEX: UserIdIndex
    ATTACHMENT_S3_BUCKET: serverless-c4-todo-images8-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    AUTH_0_SECRET: zi8nKAzPGIieHokf8-3PMvcQOj9uoVgfGhKfKw9NNzhrRkjzhB7XeEVygLsKTEYJ
    SECRET_NAME: udragram-secret
    AUTH_0_SECRET_CERT_KEY: auth0SecretCertKey
    S3_ACCESS_KEY: s3AccessKey
    S3_SECRET_KEY: s3SecretKey
    STAGE: ${self:provider.stage}

  logs:
    # Enable API Gateway logs
    restApi: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"
        # - Effect: Allow
        #   Action:
        #     - dynamodb:Scan
        #     - dynamodb:PutItem
        #     - dynamodb:GetItem
        #   Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
        # - Effect: Allow
        #   Action:
        #     - dynamodb:Query
        #   Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
        # - Effect: Allow
        #   Action:
        #   - s3:PutObject
        #   - s3:GetObject
        #   Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource: !Ref Auth0Secret
        - Effect: Allow
          Action: 
            - kms:Decrypt
          Resource: !GetAtt KMSKey.Arn

custom:
  documentation: 
      api:
        info:
          version: "5" # this will be ignored due to an issue in API Gateway doc export
          title: "My API" # this will be ignored due to an issue in API Gateway doc export
          description: "Sample Benchmarks API"
      models:
      - name: CreateTodoRequestModel
        contentType: application/json
        schema: ${file(models/create-todo-model.json)}
      - name: UpdateTodoRequestModel
        contentType: application/json
        schema: ${file(models/update-todo-model.json)}
  serverless-offline:
    port: 3003

  #local deloy
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
      shell: true
    stages:
      - ${self:provider.stage}
    seed:
      # Categories of data. We can optionally load just some of them
      todos:
        sources:
          - table: ${self:provider.environment.TODOS_TABLE}
            sources: [./dynamodb-seed/todos-seed.json]

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - secretsmanager:GetSecretValue
        Resource: !Ref Auth0Secret
      - Effect: Allow
        Action: 
          - kms:Decrypt
        Resource: !GetAtt KMSKey.Arn

  # TODO: Configure this function - DONE
  # Provide iamRoleStatements property for performing Actions on DynamoDB
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}

  # # TODO: Configure this function - DONE
  # # Provide iamRoleStatements property. Decide the Actions and AWS Resource. 
  # # To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn" 
  # # To validate incoming HTTP requests, we have provided the request schemas in function definition below. 
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new todo
            description: create a new todo
            requestModels:
              'application/json': CreateTodoRequestModel
          # request:
          #   schemas:
          #     application/json: ${file(models/create-todo-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # # TODO: Configure this function
  # # Provide property for setting up CORS, Authorizer, iamRoleStatements, and request schemas - DONE
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a todo
            description: Update a todo
            requestModels:
              'application/json': UpdateTodoRequestModel
          # request:
          #   schemas:
          #     application/json: ${file(models/update-todo-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # # TODO: Configure this function
  # # Provide property for setting up CORS, Authorizer, iamRoleStatements DONE
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # # TODO: Configure this function
  # # Provide property for setting up CORS, Authorizer, iamRoleStatements
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
        - s3:PutObject
        - s3:GetObject
        Resource: !GetAtt AttachmentsBucket.Arn
      - Effect: Allow
        Action:
          - secretsmanager:GetSecretValue
        Resource: !Ref Auth0Secret
      - Effect: Allow
        Action: 
          - kms:Decrypt
        Resource: !GetAtt KMSKey.Arn

resources:
  Resources:
    # Add necessary AWS resources. You will need at least the following AWS resources
    # TODO: Fill the properties DONE
    # Feel free to change the names as you like. 
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    # TODO: Create a DynamoDB table with local secondary index and a composite key - DONE
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
          # - AttributeName: createdAt
          #   AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
          # - AttributeName: createdAt
          #   KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
    # TodosTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     AttributeDefinitions:
    #       - AttributeName: userId
    #         AttributeType: S
    #       - AttributeName: todoId
    #         AttributeType: S
    #       - AttributeName: createdAt
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: userId
    #         KeyType: HASH
    #       - AttributeName: todoId
    #         KeyType: RANGE
    #     BillingMode: PAY_PER_REQUEST
    #     TableName: ${self:provider.environment.TODOS_TABLE}

    # TODO: Complete the bucket properties below. - DONE
    # Do not forget to add the CorsConfiguration propoerty
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    # TODO: Complete the policy below and attach it to the bucket defined above
    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: ToDoBucketPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: KMS key to encrypt Auth0 secret
        KeyPolicy:
          Version: '2012-10-17'
          Id: key-default-1
          Statement:
            - Sid: Allow administration of the key
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                  - ':'
                  - - 'arn:aws:iam:'
                    - Ref: AWS::AccountId
                    - 'root'
              Action:
                - 'kms:*'
              Resource: '*'

    KMSKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/${self:provider.environment.SECRET_NAME}
        TargetKeyId: !Ref KMSKey
    
    Auth0Secret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.SECRET_NAME}
        Description: Auth0 secret
        KmsKeyId: !Ref KMSKey

# OLD
# // "aws-xray-sdk": "^2.2.0",